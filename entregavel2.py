# -*- coding: utf-8 -*-
"""Entregavel2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11KJO-xJNTmtUHW_XQa9RU60F-sF1m9kL

# Entrega 2 - Comparativo de Modelos de Visão Computacional
# 1. YOLO Adaptável - Resultados da Entrega 1
"""

print("Resultados da Entrega 1 - YOLO Customizado")

print("\nTreinamento com 40 épocas:")
print("- Precisão Média (P): 60%")
print("- Recall Médio (R): 71.7%")
print("- mAP@50: 62.4%")

print("\nTreinamento com 60 épocas:")
print("- Precisão Média (P): 69.5%")
print("- Recall Médio (R): 74.5%")
print("- mAP@50: 66.7%")
print("- mAP@50-95: 54.4%")

"""# 2. YOLO Tradicional (modelo pré-treinado)"""

from google.colab import drive
drive.mount('/content/drive')

import torch
from matplotlib import pyplot as plt
from PIL import Image
import requests
from io import BytesIO

# Carregar o modelo YOLOv5 pré-treinado
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Testar em imagens da sua base
def predict_image(img_path):
    results = model(img_path)
    results.show()  # Mostrar imagem com detecção
    return results

img_path = '/content/drive/MyDrive/FarmTechProjeto/test/images/casa-de-fazenda.webp'
predict_image(img_path)

"""
# ---------------------------------------------------------
# 3. CNN Treinada do Zero (Classificação)
# ---------------------------------------------------------
"""

!pip install tensorflow --quiet

import tensorflow as tf
from tensorflow.keras import layers, models

# Definir dataset
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_dir = '/content/drive/MyDrive/FarmTechProjeto/train'
test_dir = '/content/drive/MyDrive/FarmTechProjeto/test'

datagen = ImageDataGenerator(rescale=1./255)

train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

test_generator = datagen.flow_from_directory(
    test_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical'
)

# Criar CNN simples
model_cnn = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(128,128,3)),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(128, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(train_generator.num_classes, activation='softmax')
])

model_cnn.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Treinar a CNN
history = model_cnn.fit(
    train_generator,
    epochs=10,
    validation_data=test_generator
)

# Avaliar a CNN
loss, acc = model_cnn.evaluate(test_generator)
print(f"Acurácia da CNN no conjunto de teste: {acc:.2f}")

